# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import rental_app_pb2 as rental__app__pb2

GRPC_GENERATED_VERSION = '1.68.1'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in rental_app_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class ageStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.age = channel.unary_unary(
                '/age/age',
                request_serializer=rental__app__pb2.birthdayMsg.SerializeToString,
                response_deserializer=rental__app__pb2.ageReply.FromString,
                _registered_method=True)


class ageServicer(object):
    """Missing associated documentation comment in .proto file."""

    def age(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ageServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'age': grpc.unary_unary_rpc_method_handler(
                    servicer.age,
                    request_deserializer=rental__app__pb2.birthdayMsg.FromString,
                    response_serializer=rental__app__pb2.ageReply.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'age', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('age', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class age(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def age(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/age/age',
            rental__app__pb2.birthdayMsg.SerializeToString,
            rental__app__pb2.ageReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class dinStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.din = channel.unary_unary(
                '/din/din',
                request_serializer=rental__app__pb2.dinMsg.SerializeToString,
                response_deserializer=rental__app__pb2.dinReply.FromString,
                _registered_method=True)


class dinServicer(object):
    """Missing associated documentation comment in .proto file."""

    def din(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_dinServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'din': grpc.unary_unary_rpc_method_handler(
                    servicer.din,
                    request_deserializer=rental__app__pb2.dinMsg.FromString,
                    response_serializer=rental__app__pb2.dinReply.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'din', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('din', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class din(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def din(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/din/din',
            rental__app__pb2.dinMsg.SerializeToString,
            rental__app__pb2.dinReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class totalStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.total = channel.unary_unary(
                '/total/total',
                request_serializer=rental__app__pb2.totalMsg.SerializeToString,
                response_deserializer=rental__app__pb2.totalReply.FromString,
                _registered_method=True)


class totalServicer(object):
    """Missing associated documentation comment in .proto file."""

    def total(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_totalServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'total': grpc.unary_unary_rpc_method_handler(
                    servicer.total,
                    request_deserializer=rental__app__pb2.totalMsg.FromString,
                    response_serializer=rental__app__pb2.totalReply.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'total', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('total', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class total(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def total(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/total/total',
            rental__app__pb2.totalMsg.SerializeToString,
            rental__app__pb2.totalReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
